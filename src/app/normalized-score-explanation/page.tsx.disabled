"use client"

import { useState, useEffect } from "react"
import { MainLayout } from "@/components/layout/main-layout"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Badge } from "@/components/ui/badge"
import { Progress } from "@/components/ui/progress"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { 
  Calculator, 
  TrendingUp, 
  Info, 
  BarChart3, 
  Target,
  Lightbulb,
  AlertTriangle,
  CheckCircle,
  Bug,
  Wrench,
  Eye,
  RefreshCw
} from "lucide-react"
import { 
  ApplicantData, 
  CalculationEngine, 
  fieldDefinitions, 
  defaultCalculationEngine 
} from "@/lib/calculation-engine"

export default function NormalizedScoreExplanation() {
  const [applicantData, setApplicantData] = useState<ApplicantData>({
    age: 35,
    annualIncome: 75000,
    loanAmount: 25000,
    creditHistoryLength: 8,
    monthlyDebtPayments: 1200,
    totalCreditLimit: 50000,
    creditCardBalances: 15000,
    monthlyExpenses: 3500,
    existingLoanAmount: 10000,
    latePayments12m: 1,
    recentInquiries: 2,
    employmentStatus: "Employed",
    educationLevel: "Bachelor"
  })
  
  const [calculationEngine] = useState<CalculationEngine>(defaultCalculationEngine)
  const [overallScore, setOverallScore] = useState<any>(null)
  const [calculatedData, setCalculatedData] = useState<ApplicantData>({})
  const [debugInfo, setDebugInfo] = useState<any>({})

  useEffect(() => {
    recalculateScores()
  }, [applicantData, calculationEngine])

  const recalculateScores = () => {
    // Calculate derived fields
    const calculated = calculationEngine.calculateAllFields(applicantData)
    setCalculatedData(calculated)
    
    // Create debug info
    const debug: any = {}
    fieldDefinitions.forEach(field => {
      if (field.enabled !== false && field.weight !== undefined) {
        const value = field.category === "derived" ? calculated[field.value] : applicantData[field.value]
        const normalizedScore = calculationEngine['normalizeValue'](value, field)
        
        debug[field.value] = {
          label: field.label,
          category: field.category,
          value: value,
          normalizedScore: normalizedScore,
          weight: field.weight,
          contribution: normalizedScore * field.weight
        }
      }
    })
    setDebugInfo(debug)
    
    // Calculate overall score
    const score = calculationEngine.calculateOverallScore(applicantData)
    setOverallScore(score)
  }

  const handleFieldChange = (field: string, value: string) => {
    const fieldDef = fieldDefinitions.find(f => f.value === field)
    let processedValue: any = value
    
    if (fieldDef?.type === "number") {
      const numValue = parseFloat(value) || 0
      processedValue = isNaN(numValue) ? 0 : numValue
    } else if (fieldDef?.type === "string") {
      processedValue = value
    }
    
    const newData = { ...applicantData, [field]: processedValue }
    setApplicantData(newData)
  }

  const getScoreColor = (percentage: number) => {
    if (percentage >= 80) return "text-green-600"
    if (percentage >= 60) return "text-orange-600"
    return "text-red-600"
  }

  const getNormalizedColor = (score: number) => {
    if (score >= 0.8) return "text-green-600"
    if (score >= 0.5) return "text-orange-600"
    return "text-red-600"
  }

  return (
    <MainLayout>
      <div className="space-y-6">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">Normalized Score Analysis</h1>
          <p className="text-muted-foreground">
            Deep dive into how normalized scores are calculated and why they might show 0.0%
          </p>
        </div>

        <Tabs defaultValue="problem" className="space-y-6">
          <TabsList className="grid w-full grid-cols-4">
            <TabsTrigger value="problem">The Problem</TabsTrigger>
            <TabsTrigger value="calculation">How It Works</TabsTrigger>
            <TabsTrigger value="debug">Debug View</TabsTrigger>
            <TabsTrigger value="solution">Solution</TabsTrigger>
          </TabsList>

          <TabsContent value="problem" className="space-y-6">
            {/* Problem Overview */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Bug className="h-5 w-5" />
                  The Normalized Score Problem
                </CardTitle>
                <CardDescription>
                  Why all fields are showing 0.0% normalized scores
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid md:grid-cols-2 gap-6">
                  <div className="p-4 border border-red-200 rounded-lg bg-red-50">
                    <h3 className="font-semibold text-red-800 mb-2">Current Issue</h3>
                    <p className="text-sm text-red-700 mb-3">
                      All fields are showing normalized scores of 0.0%, which means the scoring system 
                      is not working correctly.
                    </p>
                    <div className="space-y-2 text-sm text-red-600">
                      <div>• Overall score appears incorrect</div>
                      <div>• Field contributions are all zero</div>
                      <div>• Progress bars show no progress</div>
                      <div>• System appears broken</div>
                    </div>
                  </div>
                  
                  <div className="p-4 border border-blue-200 rounded-lg bg-blue-50">
                    <h3 className="font-semibold text-blue-800 mb-2">Root Cause Analysis</h3>
                    <p className="text-sm text-blue-700 mb-3">
                      The issue is in the calculation logic where derived fields are not being 
                      properly calculated before normalization.
                    </p>
                    <div className="space-y-2 text-sm text-blue-600">
                      <div>• Derived fields use base field data</div>
                      <div>• Base fields may be missing or invalid</div>
                      <div>• Normalization gets zero values</div>
                      <div>• All contributions become zero</div>
                    </div>
                  </div>
                </div>

                {/* Current Broken State */}
                <Card>
                  <CardHeader>
                    <CardTitle className="text-lg">Current Broken State</CardTitle>
                  </CardHeader>
                  <CardContent>
                    {overallScore ? (
                      <div className="space-y-4">
                        <div className="flex items-center justify-between">
                          <div>
                            <div className="text-3xl font-bold text-red-600">
                              {overallScore.percentage.toFixed(1)}%
                            </div>
                            <div className="text-sm text-muted-foreground">
                              Score: {overallScore.totalScore.toFixed(1)} / {overallScore.maxScore.toFixed(1)}
                            </div>
                          </div>
                          <Badge variant="destructive">Broken</Badge>
                        </div>
                        
                        <Progress value={overallScore.percentage} className="h-4" />
                        
                        <Alert>
                          <AlertTriangle className="h-4 w-4" />
                          <AlertDescription>
                            The score above is likely incorrect due to normalized score calculation issues.
                          </AlertDescription>
                        </Alert>
                      </div>
                    ) : (
                      <Alert>
                        <AlertTriangle className="h-4 w-4" />
                        <AlertDescription>
                          No score calculated - check field configurations
                        </AlertDescription>
                      </Alert>
                    )}
                  </CardContent>
                </Card>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="calculation" className="space-y-6">
            {/* How Normalization Works */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Calculator className="h-5 w-5" />
                  How Normalized Score Calculation Works
                </CardTitle>
                <CardDescription>
                  Step-by-step breakdown of the normalization process
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="grid md:grid-cols-3 gap-4">
                  <div className="p-4 border rounded-lg">
                    <h3 className="font-semibold mb-2">1. Get Field Value</h3>
                    <p className="text-sm text-muted-foreground mb-2">
                      Retrieve the actual value for each field
                    </p>
                    <div className="bg-blue-50 p-2 rounded text-xs font-mono">
                      value = data[field.value]
                    </div>
                  </div>
                  
                  <div className="p-4 border rounded-lg">
                    <h3 className="font-semibold mb-2">2. Apply Normalization</h3>
                    <p className="text-sm text-muted-foreground mb-2">
                      Convert value to 0-1 scale using field rules
                    </p>
                    <div className="bg-green-50 p-2 rounded text-xs font-mono">
                      normalized = normalize(value, field)
                    </div>
                  </div>
                  
                  <div className="p-4 border rounded-lg">
                    <h3 className="font-semibold mb-2">3. Calculate Contribution</h3>
                    <p className="text-sm text-muted-foreground mb-2">
                      Multiply by weight for final contribution
                    </p>
                    <div className="bg-purple-50 p-2 rounded text-xs font-mono">
                      contribution = normalized × weight
                    </div>
                  </div>
                </div>

                {/* Normalization Rules */}
                <div>
                  <h3 className="font-semibold mb-3">Normalization Rules by Field Type</h3>
                  <div className="space-y-4">
                    <div className="p-4 border rounded-lg">
                      <h4 className="font-medium mb-2">Range-Based Normalization</h4>
                      <p className="text-sm text-muted-foreground mb-2">
                        For fields with defined min/max values
                      </p>
                      <div className="bg-gray-50 p-3 rounded text-xs font-mono mb-2">
                        normalized = (value - min) / (max - min)
                      </div>
                      <div className="text-sm text-muted-foreground">
                        <strong>Example:</strong> Age (min: 18, max: 100)<br/>
                        Age 35: (35-18)/(100-18) = 0.21
                      </div>
                    </div>
                    
                    <div className="p-4 border rounded-lg">
                      <h4 className="font-medium mb-2">Optimal-Based Normalization</h4>
                      <p className="text-sm text-muted-foreground mb-2">
                        For fields where a specific value is optimal
                      </p>
                      <div className="bg-gray-50 p-3 rounded text-xs font-mono mb-2">
                        normalized = 1 - (|value - optimal| / maxDifference)
                      </div>
                      <div className="text-sm text-muted-foreground">
                        <strong>Example:</strong> Age (optimal: 35)<br/>
                        Age 35: 1 - (|35-35|/50) = 1.0<br/>
                        Age 25: 1 - (|25-35|/50) = 0.8
                      </div>
                    </div>
                    
                    <div className="p-4 border rounded-lg">
                      <h4 className="font-medium mb-2">Inverse Normalization</h4>
                      <p className="text-sm text-muted-foreground mb-2">
                        For ratios where lower values are better
                      </p>
                      <div className="bg-gray-50 p-3 rounded text-xs font-mono mb-2">
                        normalized = 1 - value
                      </div>
                      <div className="text-sm text-muted-foreground">
                        <strong>Example:</strong> Debt-to-Income Ratio<br/>
                        0.2 (20%): 1 - 0.2 = 0.8<br/>
                        0.8 (80%): 1 - 0.8 = 0.2
                      </div>
                    </div>
                    
                    <div className="p-4 border rounded-lg">
                      <h4 className="font-medium mb-2">Custom Field Logic</h4>
                      <p className="text-sm text-muted-foreground mb-2">
                        Special logic for specific field types
                      </p>
                      <div className="bg-gray-50 p-3 rounded text-xs font-mono mb-2">
                        // Age field special logic
                        if (age {'>='} 25 && age {'<='} 55) return 1.0
                        if (age {'>='} 22 && age {'<'} 25) return 0.7
                        // ... etc
                      </div>
                      <div className="text-sm text-muted-foreground">
                        <strong>Example:</strong> Credit Score (300-850 range)<br/>
                        Score 750: (750-300)/(850-300) = 0.82
                      </div>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* The Issue with Derived Fields */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <AlertTriangle className="h-5 w-5" />
                  The Critical Issue: Derived Fields
                </CardTitle>
                <CardDescription>
                  Why calculated fields are causing the normalization problem
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="p-4 border border-orange-200 rounded-lg bg-orange-50">
                  <h3 className="font-semibold text-orange-800 mb-2">The Problem</h3>
                  <p className="text-sm text-orange-700 mb-3">
                    The calculation engine is trying to normalize derived fields before they are calculated, 
                    resulting in undefined/zero values.
                  </p>
                  
                  <div className="space-y-3">
                    <div className="text-sm">
                      <strong>Current Flow (BROKEN):</strong>
                    </div>
                    <div className="grid md:grid-cols-3 gap-2 text-xs">
                      <div className="p-2 bg-red-100 rounded text-center">
                        1. Get Raw Data
                      </div>
                      <div className="p-2 bg-red-100 rounded text-center">
                        2. Try to Normalize
                      </div>
                      <div className="p-2 bg-red-100 rounded text-center">
                        3. Get Zero Score
                      </div>
                    </div>
                    <div className="text-xs text-red-600">
                      debtToIncomeRatio = undefined → normalized = 0 → contribution = 0
                    </div>
                  </div>
                </div>
                
                <div className="p-4 border border-green-200 rounded-lg bg-green-50">
                  <h3 className="font-semibold text-green-800 mb-2">The Solution</h3>
                  <p className="text-sm text-green-700 mb-3">
                    Calculate derived fields first, then normalize the calculated values.
                  </p>
                  
                  <div className="space-y-3">
                    <div className="text-sm">
                      <strong>Correct Flow (FIXED):</strong>
                    </div>
                    <div className="grid md:grid-cols-4 gap-2 text-xs">
                      <div className="p-2 bg-green-100 rounded text-center">
                        1. Get Base Data
                      </div>
                      <div className="p-2 bg-green-100 rounded text-center">
                        2. Calculate Derived
                      </div>
                      <div className="p-2 bg-green-100 rounded text-center">
                        3. Normalize All
                      </div>
                      <div className="p-2 bg-green-100 rounded text-center">
                        4. Get Real Score
                      </div>
                    </div>
                    <div className="text-xs text-green-600">
                      debtToIncomeRatio = 0.19 → normalized = 0.81 → contribution = 8.1
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="debug" className="space-y-6">
            {/* Debug View */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Eye className="h-5 w-5" />
                  Debug View: Normalization Process
                </CardTitle>
                <CardDescription>
                  Live debugging of the normalization calculation for each field
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div className="flex items-center justify-between">
                    <h3 className="font-semibold">Field-by-Field Analysis</h3>
                    <Button onClick={recalculateScores} variant="outline" size="sm">
                      <RefreshCw className="h-4 w-4 mr-2" />
                      Recalculate
                    </Button>
                  </div>
                  
                  <div className="grid gap-4">
                    {Object.entries(debugInfo).map(([fieldKey, debug]: [string, any]) => (
                      <div key={fieldKey} className="p-4 border rounded-lg">
                        <div className="flex items-center justify-between mb-3">
                          <div>
                            <h4 className="font-medium">{debug.label}</h4>
                            <div className="flex items-center gap-2 mt-1">
                              <Badge variant={debug.category === "derived" ? "secondary" : "outline"}>
                                {debug.category}
                              </Badge>
                              <Badge variant="outline">w{debug.weight}</Badge>
                            </div>
                          </div>
                          <div className="text-right">
                            <div className={`text-lg font-bold ${getNormalizedColor(debug.normalizedScore)}`}>
                              {(debug.normalizedScore * 100).toFixed(1)}%
                            </div>
                            <div className="text-sm text-muted-foreground">
                              Contribution: {debug.contribution.toFixed(2)}
                            </div>
                          </div>
                        </div>
                        
                        <div className="grid md:grid-cols-3 gap-4 text-sm">
                          <div>
                            <span className="text-muted-foreground">Value:</span>
                            <span className="ml-2 font-medium">
                              {debug.value !== undefined && debug.value !== null ? debug.value : "undefined"}
                            </span>
                          </div>
                          <div>
                            <span className="text-muted-foreground">Normalized:</span>
                            <span className={`ml-2 font-medium ${getNormalizedColor(debug.normalizedScore)}`}>
                              {debug.normalizedScore.toFixed(3)}
                            </span>
                          </div>
                          <div>
                            <span className="text-muted-foreground">Final Score:</span>
                            <span className="ml-2 font-medium">
                              {debug.contribution.toFixed(2)}
                            </span>
                          </div>
                        </div>
                        
                        {debug.normalizedScore === 0 && (
                          <div className="mt-2 p-2 bg-red-50 rounded text-xs text-red-700">
                            ⚠️ This field has a normalized score of 0. Check if the value is valid or if the field is properly configured.
                          </div>
                        )}
                      </div>
                    ))}
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Interactive Test */}
            <Card>
              <CardHeader>
                <CardTitle>Interactive Test</CardTitle>
                <CardDescription>
                  Modify field values to see how normalization responds
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="grid md:grid-cols-2 gap-6">
                  <div className="space-y-4">
                    <h3 className="font-semibold">Test Field Values</h3>
                    <div className="space-y-3">
                      {fieldDefinitions
                        .filter(f => f.category === "base" && f.type === "number")
                        .slice(0, 3)
                        .map(field => (
                          <div key={field.value} className="space-y-2">
                            <Label htmlFor={field.value} className="text-sm font-medium">
                              {field.label} {field.unit && `(${field.unit})`}
                            </Label>
                            <Input
                              id={field.value}
                              type="number"
                              value={applicantData[field.value] || ""}
                              onChange={(e) => handleFieldChange(field.value, e.target.value)}
                              className="text-sm"
                            />
                          </div>
                        ))}
                    </div>
                  </div>

                  <div className="space-y-4">
                    <h3 className="font-semibold">Real-time Results</h3>
                    {overallScore && (
                      <div className="space-y-4">
                        <div className="p-4 border rounded-lg">
                          <div className="text-2xl font-bold mb-2">
                            <span className={getScoreColor(overallScore.percentage)}>
                              {overallScore.percentage.toFixed(1)}%
                            </span>
                          </div>
                          <Progress value={overallScore.percentage} className="h-3" />
                        </div>
                        
                        <div className="space-y-2">
                          <h4 className="font-medium text-sm">Normalization Status:</h4>
                          <div className="text-sm">
                            <span className="text-green-600">
                              {Object.values(debugInfo).filter((d: any) => d.normalizedScore > 0.5).length}
                            </span>
                            <span className="text-muted-foreground"> good fields, </span>
                            <span className="text-red-600">
                              {Object.values(debugInfo).filter((d: any) => d.normalizedScore === 0).length}
                            </span>
                            <span className="text-muted-foreground"> zero fields</span>
                          </div>
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="solution" className="space-y-6">
            {/* Solution Overview */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Wrench className="h-5 w-5" />
                  Solution: Fixing Normalized Score Calculation
                </CardTitle>
                <CardDescription>
                  Step-by-step fix for the normalization issue
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="p-4 border border-green-200 rounded-lg bg-green-50">
                  <h3 className="font-semibold text-green-800 mb-2">The Fix</h3>
                  <p className="text-sm text-green-700 mb-3">
                    Modify the `calculateOverallScore` method to properly handle derived fields by 
                    calculating them first, then normalizing all values.
                  </p>
                  
                  <div className="space-y-3">
                    <div className="text-sm font-medium">Key Changes:</div>
                    <div className="space-y-2 text-sm">
                      <div>• <strong>Calculate derived fields first</strong> - Get all calculated values before normalization</div>
                      <div>• <strong>Use complete dataset</strong> - Combine base + calculated data for normalization</div>
                      <div>• <strong>Proper field handling</strong> - Ensure all fields have valid values</div>
                      <div>• <strong>Error handling</strong> - Graceful handling of missing/invalid data</div>
                    </div>
                  </div>
                </div>

                {/* Implementation Steps */}
                <div>
                  <h3 className="font-semibold mb-3">Implementation Steps</h3>
                  <div className="space-y-4">
                    <div className="p-4 border rounded-lg">
                      <h4 className="font-medium mb-2">Step 1: Calculate All Derived Fields</h4>
                      <div className="bg-gray-50 p-3 rounded text-xs font-mono mb-2">
// Calculate all derived fields first
const calculatedData = this.calculateAllFields(baseData)
const completeData = { ...baseData, ...calculatedData }
                      </div>
                      <p className="text-sm text-muted-foreground">
                        This ensures all derived fields have calculated values before normalization.
                      </p>
                    </div>
                    
                    <div className="p-4 border rounded-lg">
                      <h4 className="font-medium mb-2">Step 2: Use Complete Data for Normalization</h4>
                      <div className="bg-gray-50 p-3 rounded text-xs font-mono mb-2">
// Use complete dataset for normalization
const value = completeData[field.value]
const normalizedScore = this.normalizeValue(value, field)
                      </div>
                      <p className="text-sm text-muted-foreground">
                        This ensures both base and derived fields use the correct values.
                      </p>
                    </div>
                    
                    <div className="p-4 border rounded-lg">
                      <h4 className="font-medium mb-2">Step 3: Add Validation and Error Handling</h4>
                      <div className="bg-gray-50 p-3 rounded text-xs font-mono mb-2">
// Validate values before normalization
if (value === undefined || value === null || isNaN(value)) {
  normalizedScore = 0
} else {
  normalizedScore = this.normalizeValue(value, field)
}
                      </div>
                      <p className="text-sm text-muted-foreground">
                        This prevents crashes and provides graceful fallbacks.
                      </p>
                    </div>
                    
                    <div className="p-4 border rounded-lg">
                      <h4 className="font-medium mb-2">Step 4: Test with Real Data</h4>
                      <div className="space-y-2 text-sm text-muted-foreground">
                        <p>• Test with sample applicant data</p>
                        <p>• Verify all fields show non-zero normalized scores</p>
                        <p>• Check that overall score is reasonable</p>
                        <p>• Ensure field contributions make sense</p>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Expected Results */}
                <div>
                  <h3 className="font-semibold mb-3">Expected Results After Fix</h3>
                  <div className="grid md:grid-cols-2 gap-4">
                    <div className="p-4 border border-green-200 rounded-lg bg-green-50">
                      <h4 className="font-medium text-green-800 mb-2">Before Fix</h4>
                      <div className="space-y-1 text-sm text-green-700">
                        <div>• All normalized scores: 0.0%</div>
                        <div>• Overall score: 0.0%</div>
                        <div>• No field contributions</div>
                        <div>• System appears broken</div>
                      </div>
                    </div>
                    
                    <div className="p-4 border border-blue-200 rounded-lg bg-blue-50">
                      <h4 className="font-medium text-blue-800 mb-2">After Fix</h4>
                      <div className="space-y-1 text-sm text-blue-700">
                        <div>• Realistic normalized scores</div>
                        <div>• Meaningful overall score</div>
                        <div>• Proper field contributions</div>
                        <div>• Working scoring system</div>
                      </div>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Code Fix Example */}
            <Card>
              <CardHeader>
                <CardTitle>Code Fix Example</CardTitle>
                <CardDescription>
                  The actual code changes needed to fix the normalization issue
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div className="p-4 border rounded-lg">
                    <h4 className="font-medium mb-2">Current (Broken) Code</h4>
                    <div className="bg-red-50 p-3 rounded text-xs font-mono">
calculateOverallScore(data: ApplicantData) {
  // ... setup code ...
  
  this.fieldDefinitions.forEach(field => {
    // PROBLEM: Using raw data without calculating derived fields
    const value = data[field.value] || 0
    const normalizedScore = this.normalizeValue(value, field)
    // ... rest of calculation ...
  })
}
                    </div>
                  </div>
                  
                  <div className="p-4 border rounded-lg">
                    <h4 className="font-medium mb-2">Fixed Code</h4>
                    <div className="bg-green-50 p-3 rounded text-xs font-mono">
calculateOverallScore(baseData: ApplicantData) {
  // ... setup code ...
  
  // FIX: Calculate derived fields first
  const calculatedData = this.calculateAllFields(baseData)
  const completeData = { ...baseData, ...calculatedData }
  
  this.fieldDefinitions.forEach(field => {
    // FIX: Use complete data with calculated values
    const value = completeData[field.value]
    let normalizedScore = 0
    
    if (value !== undefined && value !== null && !isNaN(value)) {
      normalizedScore = this.normalizeValue(value, field)
    }
    
    // ... rest of calculation ...
  })
}
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
    </MainLayout>
  )
}